import 'package:flutter/material.dart';

/// üìù Tela de formul√°rio para criar ou editar uma receita
class FormReceitaPage extends StatefulWidget {
  const FormReceitaPage({super.key});

  @override
  State<FormReceitaPage> createState() => _FormReceitaPageState();
}

class _FormReceitaPageState extends State<FormReceitaPage> {
  /// üîë Chave do formul√°rio
  final _formKey = GlobalKey<FormState>();

  // üéØ Controllers para os campos de texto
  final TextEditingController _nomeController = TextEditingController();
  final TextEditingController _descricaoController = TextEditingController();
  final TextEditingController _categoriaController = TextEditingController();
  final TextEditingController _modoPreparoController = TextEditingController();
  final TextEditingController _tempoPreparoController = TextEditingController();
  final TextEditingController _rendimentoController = TextEditingController();

  @override
  void dispose() {
    // üóëÔ∏è Libera os controllers da mem√≥ria
    _nomeController.dispose();
    _descricaoController.dispose();
    _categoriaController.dispose();
    _modoPreparoController.dispose();
    _tempoPreparoController.dispose();
    _rendimentoController.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Cadastro de Receita'),
      ),
      body: Padding(
        padding: const EdgeInsets.all(16),
        child: Form(
          key: _formKey,
          child: ListView(
            children: [
              /// üè∑Ô∏è Nome da Receita
              TextFormField(
                controller: _nomeController,
                decoration: const InputDecoration(labelText: 'Nome'),
                validator: (value) {
                  if (value == null || value.isEmpty) {
                    return 'Por favor, insira o nome';
                  }
                  return null;
                },
              ),

              /// üìù Descri√ß√£o
              TextFormField(
                controller: _descricaoController,
                decoration: const InputDecoration(labelText: 'Descri√ß√£o'),
                maxLines: 2,
              ),

              /// üìÇ Categoria
              TextFormField(
                controller: _categoriaController,
                decoration: const InputDecoration(labelText: 'Categoria'),
              ),

              /// üç≥ Modo de Preparo
              TextFormField(
                controller: _modoPreparoController,
                decoration: const InputDecoration(labelText: 'Modo de Preparo'),
                maxLines: 4,
              ),

              /// ‚è±Ô∏è Tempo de Preparo (minutos)
              TextFormField(
                controller: _tempoPreparoController,
                decoration: const InputDecoration(labelText: 'Tempo de Preparo (minutos)'),
                keyboardType: TextInputType.number,
                validator: (value) {
                  if (value == null || value.isEmpty) {
                    return 'Informe o tempo de preparo';
                  }
                  if (int.tryParse(value) == null) {
                    return 'Informe um n√∫mero v√°lido';
                  }
                  return null;
                },
              ),

              /// üçΩÔ∏è Rendimento
              TextFormField(
                controller: _rendimentoController,
                decoration: const InputDecoration(labelText: 'Rendimento'),
              ),

              const SizedBox(height: 24),

              /// üîò Bot√£o Salvar
              ElevatedButton.icon(
                icon: const Icon(Icons.save),
                label: const Text('Salvar Receita'),
                onPressed: _salvarReceita,
              ),
            ],
          ),
        ),
      ),
    );
  }

  /// üíæ A√ß√£o para salvar a receita
  void _salvarReceita() {
    if (_formKey.currentState!.validate()) {
      // üéØ Aqui voc√™ processa os dados do formul√°rio
      final nome = _nomeController.text;
      final descricao = _descricaoController.text;
      final categoria = _categoriaController.text;
      final modoPreparo = _modoPreparoController.text;
      final tempoPreparo = int.tryParse(_tempoPreparoController.text) ?? 0;
      final rendimento = _rendimentoController.text;

      // üî• Para este exemplo, vamos apenas imprimir no console:
      print('--- Receita Salva ---');
      print('Nome: $nome');
      print('Descri√ß√£o: $descricao');
      print('Categoria: $categoria');
      print('Modo de Preparo: $modoPreparo');
      print('Tempo: $tempoPreparo minutos');
      print('Rendimento: $rendimento');

      // ‚úîÔ∏è Aqui voc√™ pode chamar seu service para salvar no banco

      // üèÅ Retornar para a tela anterior
      Navigator.pop(context);
    }
  }
}
